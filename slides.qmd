---
title: "Markdown"
subtitle: "&nbsp;"
author: Rodney Dyer, PhD
format: 
  revealjs:
    background-transition: fade
    theme: default
    chalkboard: false
    self-contained: true
editor: source
title-slide-attributes: 
  data-background-image: "media/contour.png"
  data-background-position: "right"
  data-background-size: initial
---


# Markdown {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}

&nbsp;

&nbsp;

<p align="center">
![](https://live.staticflickr.com/65535/52296244254_3443324e58_o_d.png)
</p>







## Markdown Defines Typography {.scrollable}

One of the challenges to producing several kinds of documents (e.g., HTML, DocX, PDF, Dashboard, etc.) from a single source is that the common WYSIWYG editors have you specify the physical appearance of elements.

::: {.incremental}
- The font, color, and size of Headings.  
- How to format titles and legends for tables and figures.
- How to number figures and tables.
- What is the base font.
- What is the page size.
- How do I get this image to not jump to the next f*%$ing page!!!
:::

## Separation of Content from Display

What *Markdown* lets you

- Identify the components of the text that have special meaning, and then

- Defer decisions about styles, colors, fonts, etc. until render time.

:::{.fragment .fade-in}
In this presentation, the slide title is actually a level 2 heading and is shown on the slide as a **<font size="25em">bold and larger</font>** font face.  However, if I rendered this as a single HTML page, it may be <font color="orange" size="18em">Orange</font> but if it goes to a PowerPoint, I want it to fit into my color them and be <font color="red" size="32em" style="font-family: Monospace;"><b>Red, bold, and Monospace</b></font>.
:::

## Separation Leads to Simplicity

&nbsp;

::::{.columns}

:::{.column width="50%"}
:::{.fragment .fade-in}
### üëé Never 

Waste your time working on display characteristics *before* the actual text of what you are producing is finished.  

Your time is just too valuable.
:::
:::

:::{.column width="50%"}
:::{ .fragment .fade-in}
### Instead üëç 

Waste your time working on the actual content of the work you are doing.  

The display will come later (reformatting bibliographies, changing journal formats, etc.)
:::
:::

::::

## Separation Deferrs Internal Connections

Separating also allows you to generalize things like:

- References to figures and table and 
- Bibliographies

:::{.fragment .fade-in}
What chaos is created by inserting a new figure in between Figure 3 and Figure 4 in your thesis written in Word?
:::

## Separation Leads to Dynamic Documents

The use of Markdown mixed with `R` (or python or julia) means that we can:

:::{.incremental}
1. Specify a table or figure in code 
2. When rendered the actual figure of table is produced with the data.
3. Allows dynamic documents/reports to be created
4. Forms **tight** connection between the data, analyses, and associated textual descriptions
:::

## Separation Leads to In-Text Content

Stop typing analyses and data output directly, have Markdown insert results when rendered.

:::{.incremental}
- Use `R` code *within* the text itself.
- When the document is rendered, it will execute the code an put in the results into the text parts <font color="red">auto-magically</font> (this is a *BFD*).
- Changes to data, analyses, df, test statistics, etc. are all integrated.
:::


## Markdown is Text

Finally, since Markdown is just text:

:::{.incremental}
- Allows the use of GitHub for repositories & collaboration, 
- *Never* becomes lost because you cannot find a copy of some program that is no longer supported, 
- Is always readable on all platforms at all times.
:::

## Mardown is Text

![](media/qmd_raw.png)



# YAML {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}



## YAML

YAML (**Y**et **A**nother **M**arkdown **L**anguage) is a method of setting meta-data relevant to the parsing and rendering of a markdown document. 
 
:::{.incremental}
- It **must** be at the top of the document.  

- It is *delimited* by three dashes, one set above and one below the content.

- Can be set for all files in a project (see file `_quarto.yml` in [this repository](https://github.com/dyerlabteaching/markdown)) to standardize meta data for all instances of a document type (e.g., all PDF's have this them, all DOCX have a TOC, etc.).
:::


## YAML Singleton Grammar

The way that YAML works is a simple key:value setup.  For these cases, all items are on a single line, like you did previously to change the output from docx to html by changing: 

`format: docx` 

to 

`format: html`  

The colon is REQUIRED.

## YAML as Compound Stuff

Sometimes we have nested YAML.  For example, maybe when I make a PDF I do not want a table of contents but when I create an html document I do.  Instead of reformatting and rewriting all of this, I can include both PDF and HTML YAML.

To do this, you use tabs to nest items underneath the general section **and** add a colon to the end of each line that has some kind of nested object.

:::{.fragment .fade-in}
```
format:
  html:
    toc: true
  pdf:
    toc: false
```
:::

## YAML with Several Options

And sometimes, we have a lot of options under a single *key* in YAML.  For example, if we have several authors on a paper, we can include them as itemized entries.

```
author:
  - name: YOUR NAME
  - name: OTHER PERSON
```

## Your Turn ü´µ

Try the following and see how it renders.

1. Open the quarto html document from before and add an option for the author by inserting `author: YOUR NAME HERE` into the YAML (n.b., you must replace `YOUR NAME HERE` with your actual name...)  
2. Add three authors to the paper and render it.
3. Go check out the [quarto documentation](https://quarto.org/docs/journals/authors.html) on authors and affiliations and make an affiliation for each of the three authors.


&nbsp;

```{r}
countdown::countdown(minutes=5, seconds=0, top=0, font_size = "1em") 
```


# Markdown Syntax {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}



## Simple Typographic Components

Markdown is a method to typeset *text* using only keyboard commands.  

Plain text is displayed as body styled texts.  

What you type is what you get.


## Titles, Sections, and Headings

In your word processor, you have Titles, Subtitles, Header 1, Header 2, Header 3, etc.

::::{.columns}

:::{.column width="50%"}
![](media/styles.png)
:::


:::{.column width="50%}
:::{.fragment .fade-in}
In Markdown, we indicate these elements by prepending a hashtag to the text.
:::
:::

::::


## Titles, Sections, and Headings

The more hashtags, the less prominent the header level.

![](media/headings.png){fig-align="center"}


## Simple Typographic Markup

The most common features of text are also "marked them up" using the following conventions.

&nbsp;

Markdown              | Result   
----------------------|-------------  
\*italic\*            |  *italic*  
\*\*bold\*\*          |  **bold**   
\~\~strikethrough\~\~ | ~~strikethrough~~



## Itemized & Numeric Lists

![](media/lists.png){fig-align="center"}


## Links & Local Images

URL's can be used to include both to webpages and images (either online or as a path relative to the document you are making on the computer).  



| Markdown                          | Rendered As                         |
|-----------------------------------|-------------------------------------|
| \[CES\](https://ces.vcu.edu)      | [CES](https://ces.vcu.edu)          |
| !\[alt text\](media/goat.jpg)     | ![alt text](media/goat.jpg) |

:::{.fragment .fade-in}
Local references are *relative* to the markdown document.
:::



## External Images

External images can be included as well by including full URL.

`![Little Kitty Bro](https://www.flickr.com/photo_download.gne?id=54733336478&secret=78d5afc9a9&size=o)`

<center>
![Little Kitty Bro](https://www.flickr.com/photo_download.gne?id=54733336478&secret=78d5afc9a9&size=o)
</center>

:::{.fragment .fade-in}
Additional figure configurations are described [here](https://quarto.org/docs/authoring/figures.html).
:::

<!-- https://rstudio-conf-2022.github.io/get-started-quarto/materials/01-intro-quarto.html#/anatomy-of-a-quarto-document  -->


## Embedding Video 

![Embed Code from YouTube](media/embed.png)
&nbsp;

<center>
{{< video https://www.youtube.com/embed/xvFZjo5PgG0?si=q4gqUYecVF33dsZB width=560 height=315 >}}
</center>

## Embedding Live Pages

&nbsp;

<center>
```{=html}
<iframe src="https://github.com/dyerlabteaching/" width=640 height=480></iframe>
```
</center>



## Code Chunks

Markdown mixes rather nicely with code.

1. We write code as either *chunks* between paragraphs of text or as individual *elements* within the text.
2. Code is evaluated first and the results are determined.  It can be code output, tables, or figures.
3. Then when the Markdown is converted, the code output can be hidden (or shown) and the results of the code are presented.

## Chunks of Code

Code *chunks* are defined by three backticks (under the tilde on the upper left corner of your keyboard) surrounding the code.

&nbsp;

\`\`\`\{r\}  
print("hello world")  
\`\`\`   

produces the output of the command and presents it in *analysis output styling* (just like `R`)

```{r}
print("hello world")
```


## Code Chunks

You can also produce graphics (this makes a histgram from 1000 random numbers from a normal distribution).

:::{.columns}

:::{.column width="50%"}
\`\`\`\{r\}  
hist( rnorm(1000) )  
\`\`\`   

:::

:::{.column width="50%"}
```{r}
hist( rnorm(1000) )
```

:::

:::




## Mermaids

These were `R` code, but Quarto can integrate all kinds of code.  Here is what we call a [Mermaid Diagrams](https://github.blog/developer-skills/github/include-diagrams-markdown-files-mermaid/).

&nbsp;

\`\`\`\{r\}  
flowchart LR  
  A[Hard edge] --> B(Round edge)  
  B --> C{Decision}  
  C --> D[Result one]  
  C --> E[Result two]  
\`\`\`

## Mermaids  

```{mermaid}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```


## Presentations


:::{.columns}


:::{.column width="50%"}
![](media/presentationFile.png)  
:::

:::{.column width="50%"}
![](media/presentationType.png)

:::

:::


## Presentation Formats (Visual)

<center>
![](media/presentation1.png){width="75%"}
</center>


## Presentation Formats (Source)

<center>
![](media/presentation2.png){width="75%"}
</center>



## Slide Separation

### Formatting Individual Slide Content


- Each slice starts with a **H2** (e.g., `## title`), which is denoted as its "Slide Title",   
- Subtitles are **H3** (`### subtitle`),  
- Remaining content is normal markdown.





## Customizations

There are a `ton` of customizations available.  I would suggest you look to the official [Quarto Reference](https://quarto.org/docs/reference/) site:


<center>
![](media/QuartoReference.png){width="65%"}
</center>





## Questions

&nbsp;

::: {layout-ncol="2"}
If you have any questions, please feel free to either post to the [Canvas](https://canvas.vcu.edu) discussion board for the class or drop me an [email](mailto://rjdyer@vcu.edu).

![](media/peter_sellers.gif){.middle fig-alt="Peter Sellers looking bored" fig-align="center" width="500"}
:::










